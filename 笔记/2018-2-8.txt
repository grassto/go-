1.标签与goto，见当天例子
    标签名称是大小写敏感的，建议标签全部使用大写字母。
    标签可以和goto,break,continue一起使用。
    定义但未使用的标签会导致编译错误。
    标签和goto语句之间不能出现定义新变量的语句。

2.函数
    go中有三种类型的函数
    1）普通带有名字的函数
    2）匿名函数或lambda函数
    3）方法

    4）go的函数语法规范：
    func g() // 错误的语法
    {

    }
    正确的应该是这样
    func g() {

    }
    
    5）函数调用，包名.方法名
    6）go不支持函数的重载
    7）函数声明方法可以这样
        type binOp func(int, int) int
    8）任何有返回值的函数都以return或者panic结尾
    9）值传参和引用传参
    10）go可以有命名的返回值，但是必须得用()括起来，但是也可以返回明确的值

    11）给函数传递指针可以节省内存（没有赋值变量的值）

3.变参函数
    func myFunc(a, b, arg ...int) {} // 参数长度可以为 0

    一个接受变长参数的函数可以将这个参数作为其它函数的参数进行传递,详见当天例子varargs.go

    若变长参数的类型不相同
    1）使用结构
    2）使用空接口

4.defer
    defer在return之后执行
    一般用于释放资源，类似C#的finally，
    1）关闭文件流
    2）解锁一个加锁的资源
    3）打印最终报告
    4）关闭数据库链接

    defer后的语句也可以接收参数

    使用defer可以实现代码的追踪，详见当天例子defer.go
    使用defer来记录函数的参数与返回值

5.内置函数
    名称 	说明
    close 	用于管道通信
    len、cap 	len 用于返回某个类型的长度或数量（字符串、数组、切片、map 和管道）；cap 是容量的意思，用于返回某个类型的最大容量（只能用于切片和 map）
    new、make 	new 和 make 均是用于分配内存：new 用于值类型和用户定义的类型，如自定义结构，make 用于内置引用类型（切片、map 和管道）。它们的用法就像是函数，但是将类型作为参数：new(type)、make(type)。new(T) 分配类型 T 的零值并返回其地址，也就是指向类型 T 的指针（详见第 10.1 节）。它也可以被用于基本类型：v := new(int)。make(T) 返回类型 T 的初始化之后的值，因此它比 new 进行更多的工作（详见第 7.2.3/4 节、第 8.1.1 节和第 14.2.1 节）new() 是一个函数，不要忘记它的括号
    copy、append 	用于复制和连接切片
    panic、recover 	两者均用于错误处理机制
    print、println 	底层打印函数（详见第 4.2 节），在部署环境中建议使用 fmt 包
    complex、real imag 	用于创建和操作复数（详见第 4.5.2.2 节）

6.递归函数
    最著名的斐波那契数列
