1.变量声明
	一般声明形式：var identifier type
	将类型放在后面
	
	var a int
	var b bool
	var c string
	可以使用因式分解法
	var(
		a int
		b bool
		c string
	)
	所有的内存在go中都是进行初始化的
	
2.局部变量和全局变量
	1）一般来说，函数体外定义的变量为全局变量，函数体内定义的为局部变量
	2）若局部变量与全局变量同名，那么在有局部变量的代码块内，全局变量会被暂时隐藏，在执行完后，局部变量被释放，全局变量显示。这和C#、java等类似。
	3）全局变量允许声明但不使用，但是局部变量不行。
	
3.变量赋值
	var identifier [type] = value //声明时即初始化
	a := 1 //这种赋值方法，变量必须是前面所未定义过的
	不可直接写var a，可以写var a int 或 var a = 1(会自动推断变量的类型)
	
4.值类型和引用类型
	值类型存储在栈中，引用类型存储在堆中。
	引用类型变量r1存储是r1的值所在的内存地址，或内存中第一个字所在的位置。这个内存地址被称为指针。
	
5.打印（Print）
	fmt.Printf与fmt.Sprintf的作用完全一样，不过Sprintf会将打印出的值以返回值的形式返回给开发者。
	
6.两个值的比较
	只有相同类型的值才能进行比较，若值的类型是接口，则需要它们实现了相同的接口。
	
7.复数形式（两种）
	complex64（32位实数和虚数）
	complex128（64位实数和虚数）
	例：var c1 complex128 = 5+3i
	fmt.Printf("最后的值为:%v",c1)// 5+3i
	函数 real(c) 和 imag(c) 可以分别获得相应的实数和虚数部分。
	当对内存要求不是特别高的时候，最好使用complex128来作为计算复数的类型，因为相关的函数都使用这个类型的参数。
	
8.位运算
	与&
	或|
	异或^ 相同为0，不同为1
	位清楚 &^ 指定位置上的值设为0
	
	按位补足 ^ 这个暂时不清楚  例：^2 = ^10 = -01 ^ 10 = -11
	左移<<
	右移>>
	
9.随机数random
	见相应的测试

10.运算符优先级
	优先级 	运算符
	 7 		^ !
	 6 		* / % << >> & &^
	 5 		+ - | ^
	 4 		== != < <= >= >
	 3 		<-
	 2 		&&
	 1 		||
	
11.字符类型
	
	
12.解释字符串和非解释字符串
解释型字符：
转义字符（是放在双引号中间的，称为解释型字符）
	\n		换行符
	\r		回车键
	\t		tab键
	\u或\U  Unicode字符
	\\      反斜杠自身
非解释型字符：
	使用反引号括起来的
	 `This is a raw string \n` 中的 `\n\` 会被原样输出。
	 和 C/C++不一样，Go 中的字符串是根据长度限定，而非特殊字符\0
	 
13.字符串的拼接
	+、+=
	在循环中最好不要使用+，使用函数strings.Join()，更好的办法是用字节缓冲bytes.Buffer
	
14.